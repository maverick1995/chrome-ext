/*
 * File: app/view/Events.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AI.view.Events', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.eventgrid',

    requires: [
        'AI.view.FilterField',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.toolbar.Fill',
        'Ext.form.field.Text',
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.selection.RowModel'
    ],

    itemId: 'EventInspector',
    iconCls: 'icn-events',
    title: 'Events',
    store: 'Events',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'ClearEvents',
                            iconCls: 'icn-clear',
                            text: 'Clear'
                        },
                        {
                            xtype: 'button',
                            itemId: 'RecordEvents',
                            iconCls: 'icn-record',
                            text: 'Record'
                        },
                        {
                            xtype: 'button',
                            hidden: true,
                            itemId: 'StopRecording',
                            iconCls: 'icn-stop',
                            text: 'Stop Recording'
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'filterfield',
                            itemId: 'FilterEventsList'
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'eventName',
                    text: 'Event Name'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'source',
                    text: 'Event Source',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'xtype',
                    text: 'XType',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'cmpId',
                    text: 'Cmp ID',
                    flex: 1
                }
            ],
            listeners: {
                beforeadd: {
                    fn: me.onEventInspectorBeforeAdd,
                    scope: me
                }
            },
            selModel: Ext.create('Ext.selection.RowModel', {
                mode: 'MULTI'
            })
        });

        me.callParent(arguments);
    },

    onEventInspectorBeforeAdd: function(container, component, index, eOpts) {
        this.setTitle(AI.util.i18n.getMessage(this.title));

    }

});